using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Text;
 
public class Featuring_with_Grisko
{
    private static int counter = 0;
 
    public static void Main()
    {
        string input = Console.ReadLine();
        int n = input.Length;
 
        Dictionary<char, int> charsDictionary = InitCharsDictionary(input);
               
        if (charsDictionary.Count == n)
        {
            counter = Factorial(n);                    
        }
        else
        {
                        Dictionary<string, Dictionary<char, int>> wordsDictionary =
                                new Dictionary<string, Dictionary<char, int>>();
                        wordsDictionary.Add(" ", charsDictionary);
                        int level = 0;
                        ConstructWords(wordsDictionary, level, n);
                }
 
        Console.WriteLine(counter);
    }
 
    private static Dictionary<char, int> InitCharsDictionary(string input)
    {
        Dictionary<char, int> charsDictionary = new Dictionary<char, int>();
 
        foreach (char ch in input)
        {
            if (charsDictionary.ContainsKey(ch))
            {
                charsDictionary[ch]++;
            }
            else
            {
                charsDictionary.Add(ch, 1);
            }
        }
        return charsDictionary;
    }
 
    private static void ConstructWords(
        Dictionary<string, Dictionary<char, int>> wordsDictionary,
        int level,
        int n)
    {
 
        if (level == n)
        {
            counter = wordsDictionary.Count;
            return;
        }
        else
        {
            Dictionary<string, Dictionary<char, int>> newWordsDictionary =
                new Dictionary<string, Dictionary<char, int>>();
            foreach (var wordsAtThisLevel in wordsDictionary)
            {
                foreach (var charsDictionaryForThisWord in wordsAtThisLevel.Value)
                {
                    if (wordsAtThisLevel.Key[level] != charsDictionaryForThisWord.Key)
                    {
                        Dictionary<char, int> tempDict = new Dictionary<char, int>(wordsAtThisLevel.Value);
                        tempDict[charsDictionaryForThisWord.Key]--;
                        newWordsDictionary.Add(wordsAtThisLevel.Key + charsDictionaryForThisWord.Key,
                            tempDict);
                    }
                }
            }
 
            ClearDictionaris(newWordsDictionary);
 
            level++;
            ConstructWords(newWordsDictionary, level, n);
        }
    }
 
    private static void ClearDictionaris(Dictionary<string, Dictionary<char, int>> newWordsDictionary)
    {
        foreach (var key in newWordsDictionary.Keys)
        {
            List<char> charsToRemove = new List<char>();
            foreach (var de in newWordsDictionary[key])
            {
                if (de.Value == 0)
                {
                    charsToRemove.Add(de.Key);
                }
            }
            for (int i = 0; i < charsToRemove.Count; i++)
            {
                newWordsDictionary[key].Remove(charsToRemove[i]);
            }
        }
    }
 
    private static bool CheckWord(string word)
    {
        string pattern = @"(\w{1})(?=\1)";
        return Regex.IsMatch(word, pattern);
    }
       
        private static int Factorial(int n)
        {
                if(n == 0 || n == 1)
                {
                        return 1;
                }
               
                int result = 1;
                for (int i = 2; i <= n; i++)
                {
                result *= i;
                }
               
                return result;
        }
}